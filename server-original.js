import express from 'express';
import cors from 'cors';
import multer from 'multer';
import path from 'path';
import { fileURLToPath } from 'url';
import fs from 'fs';
import Anthropic from '@anthropic-ai/sdk';
import dotenv from 'dotenv';
import { extractTextFromPDF, formatTextForAnalysis, extractTextSimple } from './pdf-text-extractor-pdf2json.js';
import { ocrWithILovePDF, convertWithILovePDF } from './ilovepdf-wrapper.js';
import { sopremaProductMatcher } from './soprema-product-matcher.js';

// Configuration
dotenv.config();
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Initialisation Express
const app = express();
app.use(cors());
app.use(express.json());

// Configuration Multer pour upload
const upload = multer({
  dest: 'uploads/',
  limits: { fileSize: 50 * 1024 * 1024 }, // 50MB max
  fileFilter: (req, file, cb) => {
    const allowedTypes = ['application/pdf', 'image/jpeg', 'image/jpg', 'image/png'];
    if (allowedTypes.includes(file.mimetype)) {
      cb(null, true);
    } else {
      cb(new Error(`Type de fichier non support√©: ${file.mimetype}`));
    }
  }
});

// Initialisation Claude
const anthropic = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY || ''
});

// Route sant√©
app.get('/api/health', (req, res) => {
  res.json({
    status: 'OK',
    features: {
      claudeAI: !!process.env.ANTHROPIC_API_KEY,
      textExtraction: true
    },
    timestamp: new Date().toISOString()
  });
});

// Route principale d'analyse avec extraction de texte
app.post('/api/analyze-invoice', upload.single('invoice'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({
        error: 'Aucun fichier fourni'
      });
    }

    console.log('üìÑ Analyse de:', req.file.originalname, 'Taille:', req.file.size, 'Type:', req.file.mimetype);

    let contentForAnalysis = '';
    let isPDF = req.file.mimetype === 'application/pdf' || 
                req.file.originalname.toLowerCase().endsWith('.pdf');

    if (isPDF) {
      console.log('üìù Extraction du texte du PDF...');
      
      try {
        // Extraire le texte du PDF
        const extractedData = await extractTextFromPDF(req.file.path);
        contentForAnalysis = formatTextForAnalysis(extractedData);
        
        console.log(`‚úÖ Texte extrait avec succ√®s: ${extractedData.text.length} caract√®res`);
        
        // Si le texte extrait est vide ou trop court, c'est probablement un PDF scann√©
        if (!extractedData.text || extractedData.text.trim().length < 50) {
          console.log('‚ö†Ô∏è Texte extrait trop court, probablement un PDF scann√©. Tentative OCR...');
          throw new Error('PDF scann√© d√©tect√©, OCR n√©cessaire');
        }
        
      } catch (extractError) {
        console.error('‚ö†Ô∏è Erreur extraction ou PDF scann√©:', extractError.message);
        
        // Tenter l'OCR avec ILovePDF (outil pdfocr)
        if (process.env.ILOVEPDF_PUBLIC_KEY && process.env.ILOVEPDF_SECRET_KEY) {
          console.log('üîç Tentative OCR avec ILovePDF (outil pdfocr)...');
          
          try {
            const ocrPath = req.file.path + '_ocr.pdf';
            await ocrWithILovePDF(
              process.env.ILOVEPDF_PUBLIC_KEY,
              process.env.ILOVEPDF_SECRET_KEY,
              req.file.path,
              ocrPath
            );
            
            console.log('‚úÖ OCR termin√©, extraction du texte du PDF OCR...');
            
            // Extraire le texte du PDF avec OCR
            try {
              const ocrData = await extractTextFromPDF(ocrPath);
              contentForAnalysis = formatTextForAnalysis(ocrData);
              console.log(`‚úÖ Texte extrait apr√®s OCR: ${ocrData.text.length} caract√®res`);
            } catch (extractOcrError) {
              console.error('‚ö†Ô∏è Erreur extraction du PDF OCR, tentative lecture directe...');
              // Si l'extraction du PDF OCR √©choue, on lit le fichier OCR comme texte brut
              try {
                const ocrBuffer = await fs.promises.readFile(ocrPath);
                // Essayer de traiter le PDF OCR comme du texte (peut contenir du texte extractible)
                contentForAnalysis = ocrBuffer.toString('utf-8').substring(0, 50000) || 'PDF trait√© par OCR - contenu extractible limit√©';
                console.log(`‚ö†Ô∏è Fallback: utilisation du contenu brut du PDF OCR (${contentForAnalysis.length} caract√®res)`);
              } catch (readError) {
                // En dernier recours, on indique qu'on a un PDF OCR mais pas d'extraction
                contentForAnalysis = 'PDF trait√© par OCR ILovePDF - extraction automatique √©chou√©e. Veuillez analyser manuellement.';
                console.log('‚ö†Ô∏è Impossible d\'extraire le texte du PDF OCR, envoi d\'un message d\'erreur √† Claude');
              }
            }
            
            // Nettoyer le fichier OCR temporaire
            fs.unlink(ocrPath, (err) => {
              if (err) console.error('Erreur suppression fichier OCR:', err);
            });
            
          } catch (ocrError) {
            console.error('‚ùå Erreur OCR:', ocrError.message);
            
            // Fallback sur extraction simple
            try {
              const simpleData = await extractTextSimple(req.file.path);
              contentForAnalysis = formatTextForAnalysis(simpleData);
              console.log('‚úÖ Extraction simple r√©ussie apr√®s √©chec OCR');
              
              // NOUVEAU: V√©rifier si l'extraction simple n'a donn√© que des m√©tadonn√©es PDF
              if (contentForAnalysis.includes('%PDF-') || contentForAnalysis.includes('endobj') || contentForAnalysis.length < 100) {
                console.log('‚ö†Ô∏è Extraction simple n\'a donn√© que des m√©tadonn√©es PDF - Fallback vers base64');
                throw new Error('Extraction simple insuffisante - contenu PDF brut d√©tect√©');
              }
            } catch (simpleError) {
              console.error('‚ùå Toutes les m√©thodes d\'extraction ont √©chou√©, envoi du PDF en base64 √† Claude');
              
              // En dernier recours, on envoie le PDF original en base64 √† Claude
              // Claude peut parfois lire directement des PDFs
              try {
                const pdfBuffer = await fs.promises.readFile(req.file.path);
                contentForAnalysis = `data:application/pdf;base64,${pdfBuffer.toString('base64')}`;
                console.log('üìÑ PDF envoy√© en base64 √† Claude comme fallback ultime');
                
                // IMPORTANT: On traite maintenant ce PDF comme une image pour Claude
                // Cela permet d'utiliser la logique d'analyse visuelle
                isPDF = false;
              } catch (base64Error) {
                console.error('‚ùå Impossible m√™me de lire le fichier en base64');
                
                return res.status(422).json({
                  error: 'Fichier illisible',
                  message: `Fichier corrompu ou inaccessible: ${base64Error.message}`,
                  requiresReprocessing: false,
                  rejected: true
                });
              }
            }
          }
        } else {
          console.log('‚ö†Ô∏è Cl√©s ILovePDF non configur√©es, essai extraction simple...');
          
          try {
            // Essayer la m√©thode simple
            const simpleData = await extractTextSimple(req.file.path);
            contentForAnalysis = formatTextForAnalysis(simpleData);
            console.log('‚úÖ Extraction simple r√©ussie');
            
            // NOUVEAU: V√©rifier si l'extraction simple n'a donn√© que des m√©tadonn√©es PDF
            if (contentForAnalysis.includes('%PDF-') || contentForAnalysis.includes('endobj') || contentForAnalysis.length < 100) {
              console.log('‚ö†Ô∏è Extraction simple n\'a donn√© que des m√©tadonn√©es PDF - Fallback vers base64');
              throw new Error('Extraction simple insuffisante - contenu PDF brut d√©tect√©');
            }
            
          } catch (simpleError) {
            console.error('‚ùå Extraction simple √©chou√©e, envoi du PDF en base64 √† Claude');
            
            // En dernier recours, on envoie le PDF original en base64 √† Claude
            try {
              const pdfBuffer = await fs.promises.readFile(req.file.path);
              contentForAnalysis = `data:application/pdf;base64,${pdfBuffer.toString('base64')}`;
              console.log('üìÑ PDF envoy√© en base64 √† Claude (pas d\'OCR disponible)');
              
              // IMPORTANT: On traite maintenant ce PDF comme une image pour Claude
              isPDF = false;
            } catch (base64Error) {
              console.error('‚ùå Impossible de lire le fichier');
              
              return res.status(422).json({
                error: 'Fichier illisible',
                message: `Fichier corrompu: ${base64Error.message}`,
                requiresReprocessing: false,
                rejected: true
              });
            }
          }
        }
      }
      
    } else {
      // Pour les images, on garde l'ancien syst√®me avec base64
      console.log('üñºÔ∏è Image d√©tect√©e, conversion en base64...');
      const fileBuffer = await fs.promises.readFile(req.file.path);
      contentForAnalysis = `data:${req.file.mimetype};base64,${fileBuffer.toString('base64')}`;
    }

    // Pr√©parer le prompt pour Claude
    const systemPrompt = `Tu es un expert en analyse de factures pour SOPREMA. Tu dois extraire les informations de la facture fournie et les retourner au format JSON structur√©.

INSTRUCTIONS IMPORTANTES:
1. Extrais TOUTES les informations disponibles de la facture
2. Pour chaque produit, identifie s'il appartient √† SOPREMA ou √† un CONCURRENT
3. Si des informations sont manquantes, utilise des valeurs par d√©faut appropri√©es
4. Les montants doivent √™tre des nombres (pas de symboles mon√©taires)
5. Les dates doivent √™tre au format YYYY-MM-DD

IDENTIFICATION DES MARQUES - TR√àS IMPORTANT:

MARQUES CONCURRENTES (isCompetitor = true):
- IKO (membranes d'√©tanch√©it√©)
- ROCKWOOL (isolation)
- ISOVER (isolation)
- URSA (isolation)
- KNAUF (isolation)
- FIRESTONE (membranes EPDM)
- CARLISLE (membranes)
- SIPLAST (√©tanch√©it√©)
- ICOPAL (membranes bitumineuses)
- BAUDER (syst√®mes d'√©tanch√©it√©)
- RHEPANOL (membranes)
- RESITRIX (membranes)
- POLYGLASS (membranes)
- DERBIGUM (membranes)
- TECHNONICOL (membranes)
- IMPERBIT (√©tanch√©it√©)
- EVERGUARD (membranes TPO)
- SARNAFIL (membranes)
- DANOSA (membranes)
- CHOVA (membranes)

MARQUES SOPREMA (isCompetitor = false):
- SOPREMA
- SOPRALENE
- SOPRASTAR
- SOPRADUR
- SARNAVAP
- PAVAFLEX
- PAVATEX
- SOPRASMART
- Tout produit avec "SOPRA" dans le nom

R√àGLE PAR D√âFAUT:
- Si la marque n'est PAS explicitement SOPREMA/SOPRA*, alors c'est un CONCURRENT
- Si tu n'es pas s√ªr, marque comme CONCURRENT (isCompetitor = true)
- SOIS STRICT: seuls les produits clairement SOPREMA doivent avoir isCompetitor = false

Format de sortie attendu:
{
  "invoiceNumber": "string",
  "date": "YYYY-MM-DD",
  "client": {
    "name": "string",
    "fullName": "string",
    "address": "string",
    "siret": "string ou null",
    "contact": "string ou null",
    "phone": "string ou null"
  },
  "distributor": {
    "name": "string",
    "agency": "string",
    "seller": "string ou null"
  },
  "products": [
    {
      "reference": "string",
      "designation": "string", 
      "quantity": number,
      "unitPrice": number,
      "totalPrice": number,
      "isCompetitor": boolean,
      "brand": "string ou null"
    }
  ],
  "totalAmount": number
}

Retourne UNIQUEMENT le JSON, sans texte avant ou apr√®s.`;

    let userPrompt = '';
    
    // Debug complet pour comprendre ce qui est envoy√©
    console.log(`üîç DEBUG: isPDF = ${isPDF}`);
    console.log(`üîç DEBUG: contentForAnalysis type = ${typeof contentForAnalysis}`);
    console.log(`üîç DEBUG: contentForAnalysis length = ${contentForAnalysis.length}`);
    console.log(`üîç DEBUG: contentForAnalysis starts with = "${contentForAnalysis.substring(0, 50)}"`);
    
    if (isPDF) {
      console.log(`üîç DEBUG: TRAITEMENT TEXTE - Envoi du texte √† Claude (${contentForAnalysis.length} caract√®res)`);
      console.log(`üìù DEBUG: Aper√ßu du texte: "${contentForAnalysis.substring(0, 200)}..."`);
      userPrompt = `Voici le texte extrait de la facture PDF. Analyse-le et extrais toutes les informations au format JSON demand√©:

${contentForAnalysis}`;
    } else {
      console.log(`üîç DEBUG: TRAITEMENT IMAGE/BASE64 - Envoi d'une image √† Claude`);
      userPrompt = `Analyse cette image de facture et extrais toutes les informations au format JSON demand√©.`;
    }

    // Appel √† Claude
    console.log('ü§ñ Analyse avec Claude 3.5 Sonnet...');
    
    const messages = isPDF ? [
      {
        role: 'user',
        content: userPrompt
      }
    ] : [
      {
        role: 'user',
        content: [
          { type: 'text', text: userPrompt },
          { 
            type: 'image', 
            source: {
              type: 'base64',
              media_type: contentForAnalysis.startsWith('data:application/pdf') ? 'image/png' : req.file.mimetype,
              data: contentForAnalysis.includes(',') ? contentForAnalysis.split(',')[1] : contentForAnalysis
            }
          }
        ]
      }
    ];

    const response = await anthropic.messages.create({
      model: 'claude-3-5-sonnet-20241022',
      max_tokens: 4096,
      temperature: 0,
      system: systemPrompt,
      messages: messages
    });

    // Extraire et parser la r√©ponse
    const responseText = response.content[0].text;
    console.log('üìù R√©ponse Claude re√ßue');
    console.log(`üîç DEBUG: R√©ponse brute Claude (${responseText.length} caract√®res): "${responseText.substring(0, 500)}..."`);
    console.log('üîç DEBUG: Recherche de JSON dans la r√©ponse...');

    // Nettoyer et parser le JSON
    const jsonMatch = responseText.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      console.log('‚ùå DEBUG: Aucun JSON trouv√© dans la r√©ponse Claude!');
      console.log('üîç DEBUG: R√©ponse compl√®te:', responseText);
      throw new Error('Aucun JSON valide trouv√© dans la r√©ponse');
    }

    console.log(`üîç DEBUG: JSON extrait: "${jsonMatch[0].substring(0, 300)}..."`);
    const extractedData = JSON.parse(jsonMatch[0]);
    console.log('‚úÖ Donn√©es extraites avec succ√®s');
    console.log(`üîç DEBUG: Produits extraits: ${extractedData.products?.length || 0}`);

    // NOUVELLE √âTAPE: V√©rification des produits avec la base Soprema
    console.log('üîç V√©rification des produits avec la base Soprema...');
    
    if (extractedData.products && extractedData.products.length > 0) {
      try {
        const verificationResult = await sopremaProductMatcher.verifyProducts(extractedData.products);
        
        // Remplacer les produits par les produits v√©rifi√©s
        extractedData.products = verificationResult.products;
        extractedData._productVerification = verificationResult.summary;
        
        console.log(`‚úÖ V√©rification termin√©e: ${verificationResult.summary.reclassifiedCount} produits reclassifi√©s`);
        console.log(`üìä Soprema: ${verificationResult.summary.sopremaTotal}‚Ç¨ | Concurrent: ${verificationResult.summary.competitorTotal}‚Ç¨`);
        
      } catch (verificationError) {
        console.error('‚ö†Ô∏è Erreur v√©rification produits:', verificationError.message);
        // On continue avec les donn√©es de Claude sans v√©rification
      }
    }

    // Retourner les donn√©es v√©rifi√©es
    res.json(extractedData);

  } catch (error) {
    console.error('‚ùå Erreur traitement:', error);
    
    if (error.message.includes('ANTHROPIC_API_KEY')) {
      return res.status(400).json({
        error: 'Configuration manquante',
        message: 'ANTHROPIC_API_KEY non configur√©e dans .env'
      });
    }

    res.status(500).json({
      error: 'Erreur d\'analyse',
      message: error.message
    });
    
  } finally {
    // Nettoyer le fichier upload√©
    if (req.file && req.file.path) {
      fs.unlink(req.file.path, (err) => {
        if (err) console.error('Erreur suppression fichier:', err);
      });
    }
  }
});

// Route pour les plans de reconqu√™te
app.post('/api/customer-reconquest-plans', async (req, res) => {
  try {
    if (!anthropic) {
      return res.status(400).json({
        error: 'Configuration manquante',
        message: 'ANTHROPIC_API_KEY non configur√©e'
      });
    }

    const { customers } = req.body;
    
    if (!customers || !Array.isArray(customers) || customers.length === 0) {
      return res.status(400).json({
        error: 'Donn√©es invalides',
        message: 'Aucun client fourni pour l\'analyse'
      });
    }

    console.log(`üéØ G√©n√©ration de plans de reconqu√™te pour ${customers.length} clients`);

    const systemPrompt = `Tu es un expert en strat√©gie commerciale pour SOPREMA, leader des solutions d'√©tanch√©it√© et d'isolation.
Ton r√¥le est d'analyser les donn√©es clients et de g√©n√©rer des plans de reconqu√™te personnalis√©s.

Pour chaque client, tu dois cr√©er un plan structur√© avec:
1. Une analyse d√©taill√©e de la situation actuelle
2. Une strat√©gie de reconqu√™te personnalis√©e
3. Des actions concr√®tes et sp√©cifiques
4. Un calendrier de mise en ≈ìuvre

Retourne UNIQUEMENT un tableau JSON avec un objet plan pour chaque client qui respecte EXACTEMENT la structure demand√©e.`;

    const userPrompt = `G√©n√®re des plans de reconqu√™te d√©taill√©s pour ces ${customers.length} clients SOPREMA.

DONN√âES CLIENTS:
${JSON.stringify(customers, null, 2)}

ATTENTION: TU DOIS RETOURNER EXACTEMENT UN TABLEAU JSON AVEC CETTE STRUCTURE - PAS D'AUTRE FORMAT:

[
  {
    "id": "reconquest-${Date.now()}-0",
    "clientName": "NOM_DU_CLIENT_ICI",
    "clientInfo": {
      "name": "NOM_DU_CLIENT_ICI",
      "address": null,
      "siret": null
    },
    "analysis": {
      "totalInvoices": NOMBRE_FACTURES,
      "totalAmount": MONTANT_TOTAL,
      "sopremaAmount": MONTANT_SOPREMA,
      "competitorAmount": MONTANT_CONCURRENT,
      "sopremaShare": "POURCENTAGE_SANS_PERCENT",
      "topCompetitorBrands": [
        {
          "brand": "NOM_MARQUE",
          "amount": MONTANT
        }
      ],
      "lastPurchaseDate": TIMESTAMP_UNIX,
      "purchaseFrequency": null
    },
    "reconquestStrategy": {
      "priority": "high|medium|low",
      "targetProducts": ["Produit SOPREMA recommand√© 1", "Produit SOPREMA recommand√© 2"],
      "estimatedPotential": MONTANT_POTENTIEL_RECUPERABLE,
      "suggestedActions": [
        {
          "type": "commercial",
          "description": "Action commerciale sp√©cifique et d√©taill√©e",
          "timing": "Dans 2 semaines"
        },
        {
          "type": "technique", 
          "description": "Action technique sp√©cifique",
          "timing": "Dans 1 mois"
        }
      ]
    },
    "createdAt": "${new Date().toISOString()}"
  }
]

G√âN√àRE UN PLAN POUR CHAQUE CLIENT EN RESPECTANT EXACTEMENT CETTE STRUCTURE.`;

    const response = await anthropic.messages.create({
      model: 'claude-3-5-sonnet-20241022',
      max_tokens: 8192,
      temperature: 0.7,
      system: systemPrompt,
      messages: [
        {
          role: 'user',
          content: userPrompt
        }
      ]
    });

    const responseText = response.content[0].text;
    const jsonMatch = responseText.match(/\[[\s\S]*\]/);
    
    if (!jsonMatch) {
      throw new Error('Aucun JSON valide trouv√© dans la r√©ponse');
    }

    const plans = JSON.parse(jsonMatch[0]);
    
    // Transformer et valider les plans
    const processedPlans = plans.map((plan, index) => {
      const customer = customers[index];
      const timestamp = Date.now();
      
      // Si le plan a d√©j√† la bonne structure, on le garde tel quel avec quelques ajouts
      if (plan.id && plan.clientName && plan.analysis && plan.reconquestStrategy) {
        return {
          ...plan,
          id: plan.id || `reconquest-${timestamp}-${index}`,
          createdAt: plan.createdAt || new Date().toISOString()
        };
      }
      
      // Sinon, transformer l'ancienne structure vers la nouvelle
      return {
        id: `reconquest-${timestamp}-${index}`,
        clientName: customer?.clientName || 'Client inconnu',
        clientInfo: {
          name: customer?.clientName || 'Client inconnu',
          address: null,
          siret: null
        },
        analysis: {
          totalInvoices: customer?.invoiceCount || 0,
          totalAmount: customer?.totalRevenue || 0,
          sopremaAmount: customer?.sopremaAmount || 0,
          competitorAmount: customer?.competitorAmount || 0,
          sopremaShare: customer?.totalRevenue > 0 ? Math.round((customer.sopremaAmount / customer.totalRevenue) * 100).toString() : '0',
          topCompetitorBrands: customer?.competitorProducts?.map(p => ({
            brand: p.brand,
            amount: p.amount
          })) || [],
          lastPurchaseDate: Date.parse(customer?.lastInvoiceDate) || Date.now(),
          purchaseFrequency: null
        },
        reconquestStrategy: {
          priority: customer?.priority || plan.priority || 'medium',
          targetProducts: plan.targetProducts || ['PAVAFLEX', 'SOPRAVAP'],
          estimatedPotential: plan.potentialValue || Math.round((customer?.competitorAmount || 0) * 0.7),
          suggestedActions: plan.actions?.map(action => ({
            type: action.type || 'commercial',
            description: action.description,
            timing: action.deadline ? `Avant le ${action.deadline}` : '√Ä d√©finir'
          })) || []
        },
        createdAt: new Date().toISOString()
      };
    });
    
    console.log(`‚úÖ ${processedPlans.length} plans de reconqu√™te g√©n√©r√©s et trait√©s`);

    // Calculer le summary bas√© sur les donn√©es r√©elles
    const totalCustomers = customers.length;
    const significantCustomers = customers.filter(c => c.competitorAmount >= 5000).length;
    const plansGenerated = processedPlans.length;

    res.json({
      success: true,
      plans: processedPlans,
      summary: {
        totalInvoicesAnalyzed: customers.reduce((sum, c) => sum + (c.invoiceCount || 0), 0),
        totalCustomers: totalCustomers,
        significantCustomers: significantCustomers,
        plansGenerated: plansGenerated,
        totalCompetitorAmount: customers.reduce((sum, c) => sum + (c.competitorAmount || 0), 0),
        thresholds: {
          minCompetitorAmount: 5000,
          minInvoices: 1
        }
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©ration plans:', error);
    res.status(500).json({
      error: 'Erreur de g√©n√©ration',
      message: error.message
    });
  }
});

// D√©marrer le serveur
const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
  console.log(`üöÄ Serveur d√©marr√© sur le port ${PORT}`);
  console.log(`üìÑ Extraction de texte PDF activ√©e`);
  console.log(`ü§ñ Claude 3.5 Sonnet: ${process.env.ANTHROPIC_API_KEY ? 'Configur√© ‚úÖ' : 'Non configur√© ‚ùå'}`);
});