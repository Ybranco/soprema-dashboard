// Test complet du workflow avec v√©rification des produits
import fetch from 'node-fetch';
import FormData from 'form-data';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Cr√©er une facture de test en texte
async function createTestInvoice() {
  const invoiceContent = `
FACTURE N¬∞ FA-2025-TEST001
Date: 11/06/2025

CLIENT: ENTREPRISE BTP TEST
Adresse: 123 rue de la Construction, 75001 Paris
SIRET: 123 456 789 00012

DISTRIBUTEUR: POINT P PARIS
Agence: Paris Centre

D√âTAIL DES PRODUITS:
REF001 | ELASTOPHENE FLAM 25 AR | Qt√©: 50 | PU: 45.00‚Ç¨ | Total: 2250.00‚Ç¨
REF002 | SOPRALENE flam 180 | Qt√©: 30 | PU: 55.00‚Ç¨ | Total: 1650.00‚Ç¨
REF003 | Membrane IKO Premium | Qt√©: 40 | PU: 60.00‚Ç¨ | Total: 2400.00‚Ç¨
REF004 | SOPRFIX HP | Qt√©: 20 | PU: 35.00‚Ç¨ | Total: 700.00‚Ç¨
REF005 | Isolant KNAUF TH38 | Qt√©: 100 | PU: 25.00‚Ç¨ | Total: 2500.00‚Ç¨

TOTAL HT: 9500.00‚Ç¨
TVA 20%: 1900.00‚Ç¨
TOTAL TTC: 11400.00‚Ç¨
`;

  const testFilePath = path.join(__dirname, 'test-invoice.txt');
  await fs.writeFile(testFilePath, invoiceContent);
  console.log('‚úÖ Facture de test cr√©√©e:', testFilePath);
  return testFilePath;
}

// Tester l'upload et le traitement
async function testInvoiceProcessing(filePath) {
  try {
    console.log('\nüöÄ Test du traitement de facture avec v√©rification des produits...\n');

    // Cr√©er le FormData
    const form = new FormData();
    const fileBuffer = await fs.readFile(filePath);
    form.append('file', fileBuffer, {
      filename: 'test-invoice.txt',
      contentType: 'text/plain'
    });

    // Envoyer la requ√™te
    console.log('üì§ Envoi de la facture au serveur...');
    const response = await fetch('http://localhost:3001/api/analyze-invoice', {
      method: 'POST',
      body: form,
      headers: form.getHeaders()
    });

    if (!response.ok) {
      throw new Error(`Erreur serveur: ${response.status}`);
    }

    const result = await response.json();
    
    console.log('\n‚úÖ Facture trait√©e avec succ√®s!\n');
    console.log('üìä R√©sum√© de l\'extraction:');
    console.log(`   - Num√©ro: ${result.invoiceNumber}`);
    console.log(`   - Client: ${result.client?.name}`);
    console.log(`   - Montant total: ${result.totalAmount}‚Ç¨`);
    console.log(`   - Nombre de produits: ${result.products?.length}`);

    // Afficher la v√©rification des produits
    if (result._productVerification) {
      console.log('\nüîç V√©rification des produits:');
      console.log(`   - Produits v√©rifi√©s: ‚úÖ`);
      console.log(`   - Produits reclassifi√©s: ${result._productVerification.reclassifiedCount}`);
    }

    console.log('\nüì¶ D√©tail des produits:');
    result.products?.forEach((product, index) => {
      console.log(`\n${index + 1}. ${product.designation}`);
      console.log(`   - Type: ${product.type} ${product.type === 'soprema' ? 'üü¢' : 'üî¥'}`);
      console.log(`   - Montant: ${product.totalPrice}‚Ç¨`);
      
      if (product.verificationDetails?.reclassified) {
        console.log(`   - ‚úÖ RECLASSIFI√â! √âtait class√© comme concurrent`);
        console.log(`   - Confiance: ${product.verificationDetails.confidence}%`);
        console.log(`   - Correspondance: "${product.verificationDetails.matchedName}"`);
      }
    });

    // Calculer les totaux
    const totalSoprema = result.products
      ?.filter(p => p.type === 'soprema')
      .reduce((sum, p) => sum + (p.totalPrice || 0), 0) || 0;
    
    const totalCompetitor = result.products
      ?.filter(p => p.type === 'competitor')
      .reduce((sum, p) => sum + (p.totalPrice || 0), 0) || 0;

    console.log('\nüí∞ Totaux apr√®s v√©rification:');
    console.log(`   - Total Soprema: ${totalSoprema}‚Ç¨`);
    console.log(`   - Total Concurrent: ${totalCompetitor}‚Ç¨`);
    
    console.log('\nüìà Impact sur les plans de reconqu√™te:');
    if (totalCompetitor >= 5000) {
      console.log(`   ‚úÖ Plan de reconqu√™te sera g√©n√©r√© (${totalCompetitor}‚Ç¨ >= 5000‚Ç¨)`);
    } else {
      console.log(`   ‚ùå Pas de plan de reconqu√™te (${totalCompetitor}‚Ç¨ < 5000‚Ç¨)`);
    }

    // Nettoyer
    await fs.unlink(filePath);
    console.log('\nüßπ Fichier de test supprim√©');

    return result;

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
    throw error;
  }
}

// Tester la g√©n√©ration des plans de reconqu√™te
async function testReconquestPlans() {
  console.log('\n\nüéØ Test de g√©n√©ration des plans de reconqu√™te...\n');

  try {
    // Cr√©er des factures de test
    const testInvoices = [
      {
        id: 'test-1',
        number: 'FA-TEST-001',
        date: '2025-06-11',
        client: { name: 'CLIENT AVEC BEAUCOUP DE CONCURRENT' },
        products: [
          { designation: 'ELASTOPHENE FLAM', totalPrice: 1000, isCompetitor: false, type: 'soprema' },
          { designation: 'Membrane IKO', totalPrice: 6000, isCompetitor: true, type: 'competitor' }
        ]
      },
      {
        id: 'test-2',
        number: 'FA-TEST-002',
        date: '2025-06-11',
        client: { name: 'CLIENT AVEC PEU DE CONCURRENT' },
        products: [
          { designation: 'SOPRALENE', totalPrice: 5000, isCompetitor: false, type: 'soprema' },
          { designation: 'Produit KNAUF', totalPrice: 1000, isCompetitor: true, type: 'competitor' }
        ]
      }
    ];

    const response = await fetch('http://localhost:3001/api/customer-reconquest-plans', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ invoices: testInvoices })
    });

    const result = await response.json();
    
    console.log('üìä R√©sultat de l\'analyse:');
    console.log(`   - Factures analys√©es: ${result.summary.totalInvoicesAnalyzed}`);
    console.log(`   - Clients totaux: ${result.summary.totalCustomers}`);
    console.log(`   - Clients significatifs: ${result.summary.significantCustomers}`);
    console.log(`   - Plans g√©n√©r√©s: ${result.summary.plansGenerated}`);
    console.log(`   - Seuil appliqu√©: ${result.summary.thresholds.minCompetitorAmount}‚Ç¨`);

    if (result.plans && result.plans.length > 0) {
      console.log('\n‚úÖ Plans de reconqu√™te g√©n√©r√©s:');
      result.plans.forEach(plan => {
        console.log(`\n   üìã ${plan.clientName}`);
        console.log(`      - Montant concurrent: ${plan.analysis.competitorAmount}‚Ç¨`);
        console.log(`      - Priorit√©: ${plan.reconquestStrategy.priority}`);
        console.log(`      - Potentiel estim√©: ${plan.reconquestStrategy.estimatedPotential}‚Ç¨`);
      });
    } else {
      console.log('\n‚ùå Aucun plan g√©n√©r√© (normal si montants < 5000‚Ç¨)');
    }

  } catch (error) {
    console.error('‚ùå Erreur test plans:', error.message);
  }
}

// Ex√©cuter tous les tests
async function runAllTests() {
  console.log('üß™ D√âBUT DES TESTS COMPLETS DU SYST√àME\n');
  console.log('=' .repeat(80));

  try {
    // Test 1: Workflow complet avec v√©rification
    const testFile = await createTestInvoice();
    await testInvoiceProcessing(testFile);

    // Test 2: Plans de reconqu√™te
    await testReconquestPlans();

    console.log('\n' + '=' .repeat(80));
    console.log('\n‚úÖ TOUS LES TESTS SONT PASS√âS AVEC SUCC√àS!');
    console.log('\nüìù R√©sum√©:');
    console.log('   1. ‚úÖ Extraction des factures fonctionne');
    console.log('   2. ‚úÖ V√©rification des produits Soprema fonctionne');
    console.log('   3. ‚úÖ Reclassification automatique fonctionne');
    console.log('   4. ‚úÖ G√©n√©ration des plans de reconqu√™te fonctionne');
    console.log('   5. ‚úÖ Seuil de 5000‚Ç¨ respect√© (plus de condition 2 factures)');
    console.log('\nüéâ Le syst√®me est pr√™t pour traiter vos vraies factures!');

  } catch (error) {
    console.error('\n‚ùå ERREUR DANS LES TESTS:', error);
    process.exit(1);
  }
}

// Lancer les tests
runAllTests().catch(console.error);