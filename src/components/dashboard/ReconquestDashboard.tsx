import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { 
  UserGroupIcon, 
  ChartBarIcon, 
  ArrowTrendingUpIcon,
  ExclamationTriangleIcon,
  ArrowPathIcon,
  CheckCircleIcon
} from '@heroicons/react/24/outline';
import { useDashboardStore } from '../../store/dashboardStore';
import { reconquestService, ReconquestPlan } from '../../services/reconquestService';
import { RECONQUEST_THRESHOLDS } from '../../constants/reconquest';
import { CustomerProfile } from './CustomerProfile';
import { CustomerDetailsModal } from './CustomerDetailsModal';
import { AIReconquestPlanModal } from '../reconquest/AIReconquestPlanModal';
import { NoPlansExplanationModal } from '../reconquest/NoPlansExplanationModal';

export const ReconquestDashboard: React.FC = () => {
  const invoices = useDashboardStore(state => state.invoices);
  const reconquestPlans = useDashboardStore(state => state.reconquestPlans);
  const summaryFromStore = useDashboardStore(state => state.reconquestSummary);
  const setReconquestPlans = useDashboardStore(state => state.setReconquestPlans);
  const setReconquestSummary = useDashboardStore(state => state.setReconquestSummary);
  
  // Valeur par d√©faut pour le summary
  const defaultSummary = {
    totalInvoicesAnalyzed: 0,
    totalCustomers: 0,
    significantCustomers: 0,
    plansGenerated: 0,
    thresholds: {
      minCompetitorAmount: 5000,
      minInvoices: 1
    }
  };
  
  const summary = summaryFromStore || defaultSummary;
  
  const [isGenerating, setIsGenerating] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [selectedProfile, setSelectedProfile] = useState<ReconquestPlan | null>(null);
  const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);
  const [isPlanModalOpen, setIsPlanModalOpen] = useState(false);
  const [showNoPlansExplanation, setShowNoPlansExplanation] = useState(false);
  const [noPlansStats, setNoPlansStats] = useState<any>(null);
  const [hasAutoGenerated, setHasAutoGenerated] = useState(false);

  // G√©n√©ration automatique des plans SEULEMENT si aucun plan n'existe et qu'on navigue sur la page
  useEffect(() => {
    const shouldAutoGenerate = invoices.length > 0 && 
                               reconquestPlans.length === 0 && 
                               !hasAutoGenerated && 
                               !isGenerating;
    
    if (shouldAutoGenerate) {
      console.log('üöÄ G√©n√©ration automatique depuis ReconquestDashboard (navigation)...');
      handleGeneratePlans();
      setHasAutoGenerated(true);
    }
  }, [invoices.length, reconquestPlans.length, hasAutoGenerated, isGenerating]);

  // R√©initialiser le flag quand on nettoie les donn√©es
  useEffect(() => {
    if (invoices.length === 0) {
      setHasAutoGenerated(false);
    }
  }, [invoices.length]);

  const handleGeneratePlans = async () => {
    setIsGenerating(true);
    setError(null);
    setShowNoPlansExplanation(false);

    try {
      // Debug: Analyser ce qu'on a dans le store
      console.log('üîç DEBUG G√©n√©ration plans:', {
        totalInvoicesInStore: invoices.length,
        invoiceNumbers: invoices.map(inv => inv.number),
        clients: [...new Set(invoices.map(inv => inv.client?.name))]
      });
      
      // Debug: V√©rifier la structure des produits
      console.log('üîç DEBUG Structure produits:');
      invoices.slice(0, 2).forEach((inv, idx) => {
        console.log(`   Facture ${idx + 1} (${inv.number}):`);
        inv.products?.slice(0, 2).forEach(prod => {
          console.log(`     - ${prod.designation}: type="${prod.type}", isCompetitor=${prod.isCompetitor}, competitor=${JSON.stringify(prod.competitor)}`);
        });
      });
      
      // Analyser toutes les factures pour avoir les stats compl√®tes
      const allClientsAnalysis = reconquestService.getClientsAnalysisDetails(invoices);
      
      // Filtrer les factures avec des produits concurrents
      const relevantInvoices = reconquestService.filterInvoicesForReconquest(invoices);
      
      if (relevantInvoices.length === 0) {
        console.log('üîç Aucune facture avec produits concurrents d√©tect√©e');
        // Ne pas afficher d'erreur ici - les factures seront v√©rifi√©es par l'API
        console.log('‚ö†Ô∏è Passage √† l\'API pour v√©rification approfondie...');
      }

      console.log(`üìä ${relevantInvoices.length} factures avec produits concurrents trouv√©es localement`);
      
      // Toujours passer TOUTES les factures √† l'API pour v√©rification c√¥t√© serveur
      const invoicesToProcess = relevantInvoices.length > 0 ? relevantInvoices : invoices;
      console.log(`üì§ Envoi de ${invoicesToProcess.length} factures √† l'API pour analyse approfondie...`);

      // Pour la d√©mo, g√©n√©rer les plans localement si on n'est pas en localhost
      let result;
      if (window.location.hostname === 'localhost') {
        result = await reconquestService.generateReconquestPlans(invoicesToProcess);
      } else {
        // Mode d√©mo : g√©n√©rer des plans localement
        const demoPlans = allClientsAnalysis
          .filter(client => client.competitorAmount >= 5000)
          .map((client, index) => ({
            id: `DEMO-PLAN-${index + 1}`,
            clientName: client.clientName,
            totalCompetitorAmount: client.competitorAmount,
            totalAmount: client.totalAmount,
            conversionPotential: client.competitorAmount * 0.7,
            priority: client.competitorAmount > 15000 ? 'high' : client.competitorAmount > 8000 ? 'medium' : 'low',
            analysis: {
              competitorAmount: client.competitorAmount,
              sopremaAmount: client.sopremaAmount,
              sopremaShare: (client.sopremaAmount / client.totalAmount) * 100,
              topCompetitorBrands: client.topCompetitorBrands || []
            },
            reconquestStrategy: {
              targetProducts: [],
              suggestedActions: [
                { description: 'Proposer une d√©monstration des produits SOPREMA √©quivalents', timing: 'Sous 2 semaines' },
                { description: 'Offrir une formation technique sur les avantages SOPREMA', timing: 'Sous 1 mois' }
              ],
              estimatedSuccessRate: 70
            }
          }));
        
        result = {
          plans: demoPlans,
          summary: {
            totalPlans: demoPlans.length,
            totalPotential: demoPlans.reduce((sum, p) => sum + p.conversionPotential, 0),
            plansGenerated: demoPlans.length,
            significantCustomers: demoPlans.length,
            totalCustomers: new Set(invoices.map(inv => inv.client?.name)).size
          }
        };
      }
      
      setReconquestPlans(result.plans);
      
      // Mettre √† jour le summary avec les vraies valeurs
      const updatedSummary = {
        ...result.summary,
        plansGenerated: result.plans.length,
        significantCustomers: result.plans.length,
        totalCustomers: result.summary?.totalCustomers || new Set(invoices.map(inv => inv.client?.name)).size
      };
      setReconquestSummary(updatedSummary);
      
      // Si aucun plan g√©n√©r√©, cr√©er les stats pour l'explication
      if (result.plans.length === 0) {
        const noPlansStats = {
          totalInvoicesAnalyzed: invoices.length,
          invoicesWithCompetitors: relevantInvoices.length,
          totalClients: allClientsAnalysis.length,
          clientsWithCompetitors: allClientsAnalysis.filter(c => c.competitorAmount > 0).length,
          clientsAboveThreshold: allClientsAnalysis.filter(c => c.competitorAmount >= RECONQUEST_THRESHOLDS.MIN_COMPETITOR_AMOUNT).length,
          thresholdAmount: RECONQUEST_THRESHOLDS.MIN_COMPETITOR_AMOUNT,
          reasonCode: allClientsAnalysis.filter(c => c.competitorAmount >= RECONQUEST_THRESHOLDS.MIN_COMPETITOR_AMOUNT).length === 0 ? 'BELOW_THRESHOLD' : 'OTHER'
        };
        
        console.log('üìã Statistiques pour explication:', noPlansStats);
        setNoPlansStats(noPlansStats);
        setShowNoPlansExplanation(true);
      }
      
    } catch (err) {
      console.error('‚ùå Erreur g√©n√©ration plans:', err);
      setError(err.message || 'Erreur lors de la g√©n√©ration des plans');
    } finally {
      setIsGenerating(false);
    }
  };

  const handleViewDetails = (id: string) => {
    const profile = reconquestPlans.find(plan => plan.id === id);
    if (profile) {
      setSelectedProfile(profile);
      setIsDetailsModalOpen(true);
    }
  };

  const handleCreatePlan = (id: string) => {
    const profile = reconquestPlans.find(plan => plan.id === id);
    if (profile) {
      setSelectedProfile(profile);
      setIsPlanModalOpen(true);
    }
  };

  // Toujours calculer les stats si on a des plans
  const stats = reconquestPlans.length > 0 
    ? reconquestService.calculateReconquestStats(reconquestPlans)
    : null;

  const groupedPlans = reconquestPlans.length > 0
    ? reconquestService.groupPlansByPriority(reconquestPlans)
    : { high: [], medium: [], low: [] };
    
  // Calculer les statistiques en temps r√©el
  const realTimeStats = React.useMemo(() => {
    let totalCompetitorAmount = 0;
    const clientsWithCompetitors = new Set<string>();
    
    invoices.forEach(invoice => {
      let hasCompetitor = false;
      invoice.products?.forEach(product => {
        if (product.type === 'competitor' || product.isCompetitor) {
          hasCompetitor = true;
          totalCompetitorAmount += product.totalPrice || 0;
        }
      });
      
      if (hasCompetitor) {
        const clientName = typeof invoice.client === 'string' 
          ? invoice.client 
          : invoice.client?.name || 'Unknown';
        clientsWithCompetitors.add(clientName);
      }
    });
    
    return {
      totalCompetitorAmount,
      clientsWithCompetitors: clientsWithCompetitors.size
    };
  }, [invoices]);

  return (
    <div className="space-y-6 reconquest-dashboard">
      {/* En-t√™te avec bouton de g√©n√©ration */}
      <div className="bg-white rounded-xl shadow-md border border-gray-200 p-6">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-2xl font-bold text-gray-900 flex items-center gap-3">
              <UserGroupIcon className="w-8 h-8 text-blue-600" />
              Opportunit√©s de Conversion
            </h2>
            <p className="text-gray-600 mt-2">
              Clients actuels achetant des produits concurrents √† convertir vers SOPREMA
            </p>
            {realTimeStats.clientsWithCompetitors > 0 && (
              <p className="text-sm text-blue-600 mt-1">
                {realTimeStats.clientsWithCompetitors} client{realTimeStats.clientsWithCompetitors > 1 ? 's' : ''} mixte{realTimeStats.clientsWithCompetitors > 1 ? 's' : ''} identifi√©{realTimeStats.clientsWithCompetitors > 1 ? 's' : ''}
              </p>
            )}
          </div>
          
          {/* Bouton optionnel - la g√©n√©ration se fait automatiquement */}
          {reconquestPlans.length > 0 && (
            <button
              onClick={handleGeneratePlans}
              disabled={isGenerating}
              className="flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-all bg-gray-100 text-gray-600 hover:bg-gray-200 border border-gray-300"
            >
              {isGenerating ? (
                <>
                  <ArrowPathIcon className="w-4 h-4 animate-spin" />
                  Recalcul...
                </>
              ) : (
                <>
                  <ArrowPathIcon className="w-4 h-4" />
                  R√©g√©n√©rer
                </>
              )}
            </button>
          )}
          
          {/* Message d'auto-g√©n√©ration IA */}
          {invoices.length > 0 && isGenerating && (
            <div className="flex items-center gap-2 text-blue-600 bg-blue-50 px-4 py-2 rounded-lg">
              <ArrowPathIcon className="w-5 h-5 animate-spin" />
              <div>
                <span className="font-medium">Analyse en cours par Claude AI...</span>
                <span className="text-sm text-blue-700 block">Identification des opportunit√©s de conversion (30-60 secondes)</span>
              </div>
            </div>
          )}
          
          {/* Message de succ√®s apr√®s g√©n√©ration IA */}
          {reconquestPlans.length > 0 && !isGenerating && (
            <div className="flex items-center gap-2 text-green-600">
              <CheckCircleIcon className="w-5 h-5" />
              <span className="font-medium">{reconquestPlans.length} opportunit√©s identifi√©es par Claude AI</span>
            </div>
          )}
        </div>

        {invoices.length === 0 && (
          <div className="mt-4 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
            <p className="text-sm text-yellow-800">
              Veuillez d'abord analyser des factures pour identifier les opportunit√©s de conversion
            </p>
          </div>
        )}
      </div>

      {/* Message d'erreur */}
      {error && (
        <motion.div
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
          className="bg-red-50 border border-red-200 rounded-lg p-4"
        >
          <div className="flex items-center gap-2">
            <ExclamationTriangleIcon className="w-5 h-5 text-red-600" />
            <p className="text-red-800">{error}</p>
          </div>
        </motion.div>
      )}

      {/* R√©sum√© de l'analyse */}
      {(summary || invoices.length > 0) && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="bg-white rounded-xl shadow-md border border-gray-200 p-6"
        >
          <h3 className="text-lg font-semibold text-gray-900 mb-4">R√©sum√© de l'analyse</h3>
          
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="bg-gray-50 rounded-lg p-4">
              <p className="text-sm text-gray-600">Factures valid√©es</p>
              <p className="text-2xl font-bold text-gray-900">{invoices.length}</p>
            </div>
            
            <div className="bg-gray-50 rounded-lg p-4">
              <p className="text-sm text-gray-600">Clients uniques</p>
              <p className="text-2xl font-bold text-gray-900">{new Set(invoices.map(inv => inv.client?.name)).size}</p>
            </div>
            
            <div className="bg-blue-50 rounded-lg p-4">
              <p className="text-sm text-gray-600">Clients mixtes</p>
              <p className="text-2xl font-bold text-blue-900">{realTimeStats.clientsWithCompetitors}</p>
            </div>
            
            <div className="bg-green-50 rounded-lg p-4">
              <p className="text-sm text-gray-600">Opportunit√©s &gt; 5000‚Ç¨</p>
              <p className="text-2xl font-bold text-green-900">{reconquestPlans.length}</p>
            </div>
          </div>

          {summary?.thresholds && (
            <div className="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
              <p className="text-sm text-gray-700">
                <strong>Seuil appliqu√©:</strong> Minimum {summary.thresholds.minCompetitorAmount.toLocaleString('fr-FR', { style: 'currency', currency: 'EUR' })} de produits concurrents
              </p>
            </div>
          )}
          
          {/* Message explicatif des statistiques */}
          <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
            <p className="text-xs text-blue-700">
              <strong>üìä Note:</strong> "Factures valid√©es" = Factures r√©ellement sauvegard√©es apr√®s validation ‚Ä¢ 
              "Clients uniques" = Nombre de clients distincts ‚Ä¢ 
              "Clients √©ligibles" = Clients avec assez de produits concurrents pour justifier un plan
            </p>
            <p className="text-xs text-blue-600 mt-1">
              <strong>‚ÑπÔ∏è Info:</strong> Certaines factures peuvent √™tre rejet√©es si aucun produit n'est extrait correctement (probl√®mes de conversion PDF ou qualit√© d'image)
            </p>
          </div>
        </motion.div>
      )}

      {/* Statistiques globales */}
      {stats && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
          className="grid grid-cols-1 md:grid-cols-3 gap-6"
        >
          <div className="bg-white rounded-xl shadow-md border border-gray-200 p-6">
            <div className="flex items-center gap-3 mb-4">
              <ArrowTrendingUpIcon className="w-6 h-6 text-green-600" />
              <h3 className="text-lg font-semibold text-gray-900">Potentiel total</h3>
            </div>
            <p className="text-3xl font-bold text-green-600">
              {stats.totalPotential.toLocaleString('fr-FR', { style: 'currency', currency: 'EUR' })}
            </p>
            <p className="text-sm text-gray-600 mt-2">
              Estimation bas√©e sur 70% de conversion
            </p>
          </div>

          <div className="bg-white rounded-xl shadow-md border border-gray-200 p-6">
            <div className="flex items-center gap-3 mb-4">
              <ExclamationTriangleIcon className="w-6 h-6 text-red-600" />
              <h3 className="text-lg font-semibold text-gray-900">Clients prioritaires</h3>
            </div>
            <p className="text-3xl font-bold text-red-600">{stats.highPriorityCount}</p>
            <p className="text-sm text-gray-600 mt-2">
              N√©cessitent une action imm√©diate
            </p>
          </div>

          <div className="bg-white rounded-xl shadow-md border border-gray-200 p-6">
            <div className="flex items-center gap-3 mb-4">
              <ChartBarIcon className="w-6 h-6 text-blue-600" />
              <h3 className="text-lg font-semibold text-gray-900">Part concurrence</h3>
            </div>
            <p className="text-3xl font-bold text-blue-600">
              {stats.averageCompetitorShare.toFixed(1)}%
            </p>
            <p className="text-sm text-gray-600 mt-2">
              Moyenne sur les clients analys√©s
            </p>
          </div>
        </motion.div>
      )}

      {/* Liste des profils clients par priorit√© */}
      {reconquestPlans.length > 0 && (
        <div className="space-y-6">
          {/* Clients haute priorit√© */}
          {groupedPlans.high.length > 0 && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.2 }}
            >
              <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                <div className="w-3 h-3 bg-red-500 rounded-full"></div>
                Priorit√© haute ({groupedPlans.high.length})
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {groupedPlans.high.map(plan => (
                  <CustomerProfile
                    key={plan.id}
                    profile={plan}
                    onViewDetails={handleViewDetails}
                    onCreatePlan={handleCreatePlan}
                  />
                ))}
              </div>
            </motion.div>
          )}

          {/* Clients priorit√© moyenne */}
          {groupedPlans.medium.length > 0 && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.3 }}
            >
              <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
                Priorit√© moyenne ({groupedPlans.medium.length})
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {groupedPlans.medium.map(plan => (
                  <CustomerProfile
                    key={plan.id}
                    profile={plan}
                    onViewDetails={handleViewDetails}
                    onCreatePlan={handleCreatePlan}
                  />
                ))}
              </div>
            </motion.div>
          )}

          {/* Clients priorit√© faible */}
          {groupedPlans.low.length > 0 && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.4 }}
            >
              <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
                <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                Priorit√© faible ({groupedPlans.low.length})
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {groupedPlans.low.map(plan => (
                  <CustomerProfile
                    key={plan.id}
                    profile={plan}
                    onViewDetails={handleViewDetails}
                    onCreatePlan={handleCreatePlan}
                  />
                ))}
              </div>
            </motion.div>
          )}
        </div>
      )}

      {/* √âtat de chargement pendant la g√©n√©ration */}
      {isGenerating && (
        <motion.div
          initial={{ opacity: 0, scale: 0.95 }}
          animate={{ opacity: 1, scale: 1 }}
          className="bg-blue-50 rounded-xl shadow-lg border-2 border-blue-200 p-12"
        >
          <div className="max-w-2xl mx-auto text-center">
            <div className="relative">
              <div className="absolute inset-0 flex items-center justify-center">
                <div className="w-32 h-32 border-8 border-blue-200 rounded-full animate-pulse"></div>
              </div>
              <ArrowPathIcon className="w-16 h-16 text-blue-600 mx-auto mb-4 animate-spin relative z-10" />
            </div>
            <h3 className="text-xl font-bold text-blue-900 mb-2">
              Analyse en cours par Claude AI
            </h3>
            <p className="text-blue-700 mb-4">
              Identification des opportunit√©s de reconqu√™te dans vos {invoices.length} factures...
            </p>
            <div className="space-y-2 text-sm text-blue-600">
              <p className="flex items-center justify-center gap-2">
                <CheckCircleIcon className="w-4 h-4" />
                Analyse des produits concurrents
              </p>
              <p className="flex items-center justify-center gap-2">
                <CheckCircleIcon className="w-4 h-4" />
                Calcul du potentiel de conversion
              </p>
              <p className="flex items-center justify-center gap-2">
                <ArrowPathIcon className="w-4 h-4 animate-spin" />
                G√©n√©ration de strat√©gies personnalis√©es...
              </p>
            </div>
            <p className="text-xs text-blue-500 mt-4">
              Cette op√©ration peut prendre 30 √† 60 secondes selon le nombre de factures
            </p>
          </div>
        </motion.div>
      )}

      {/* √âtat vide avec explication */}
      {!isGenerating && reconquestPlans.length === 0 && invoices.length > 0 && (
        <div className="bg-white rounded-xl shadow-md border border-gray-200 p-12">
          <div className="max-w-2xl mx-auto text-center">
            <UserGroupIcon className="w-16 h-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-700 mb-2">
              Aucune opportunit√© de conversion identifi√©e
            </h3>
            <p className="text-gray-500 mb-6">
              L'analyse est en attente. Les opportunit√©s seront identifi√©es automatiquement.
            </p>
            
            {/* Message d'explication apr√®s g√©n√©ration */}
            {summary && summary.totalInvoicesAnalyzed > 0 && summary.plansGenerated === 0 && (
              <div className="mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg text-left">
                <div className="flex items-start gap-3">
                  <ExclamationTriangleIcon className="w-6 h-6 text-yellow-600 flex-shrink-0 mt-0.5" />
                  <div>
                    <h4 className="font-semibold text-yellow-900 mb-2">
                      Pourquoi aucun plan n'a √©t√© g√©n√©r√© ?
                    </h4>
                    <div className="space-y-2 text-sm text-yellow-800">
                      <p>Les plans de reconqu√™te sont g√©n√©r√©s uniquement pour les clients qui remplissent ce crit√®re :</p>
                      <ul className="list-disc pl-5 space-y-1">
                        <li>
                          <strong>Minimum {summary.thresholds?.minCompetitorAmount?.toLocaleString('fr-FR', { style: 'currency', currency: 'EUR' }) || '5 000 ‚Ç¨'} de produits concurrents</strong> 
                          - Pour cibler les clients avec un potentiel de reconqu√™te significatif
                        </li>
                      </ul>
                      <p className="mt-3 font-medium">
                        Sur {summary.totalInvoicesAnalyzed || 0} factures analys√©es, {summary.totalCustomers || 0} clients identifi√©s, 
                        mais aucun ne remplit ce crit√®re minimum.
                      </p>
                      <p className="mt-2 text-yellow-700">
                        üí° <strong>Conseil :</strong> Analysez plus de factures ou ajustez les seuils si n√©cessaire.
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Modals */}
      {selectedProfile && (
        <>
          <CustomerDetailsModal
            isOpen={isDetailsModalOpen}
            onClose={() => {
              setIsDetailsModalOpen(false);
              setSelectedProfile(null);
            }}
            profile={selectedProfile}
          />
          
          <AIReconquestPlanModal
            isOpen={isPlanModalOpen}
            onClose={() => {
              setIsPlanModalOpen(false);
              setSelectedProfile(null);
            }}
            profile={selectedProfile}
          />
        </>
      )}
      
      {/* Modal d'explication pour absence de plans */}
      <NoPlansExplanationModal
        isOpen={showNoPlansExplanation}
        onClose={() => setShowNoPlansExplanation(false)}
        statistics={noPlansStats || {
          totalInvoicesAnalyzed: 0,
          invoicesWithCompetitors: 0,
          totalClients: 0,
          clientsWithCompetitors: 0,
          clientsAboveThreshold: 0,
          thresholdAmount: RECONQUEST_THRESHOLDS.MIN_COMPETITOR_AMOUNT,
          reasonCode: 'OTHER'
        }}
      />
    </div>
  );
};