import { create } from 'zustand';
import { persist, createJSONStorage } from 'zustand/middleware';
import { Invoice, Opportunity, DashboardStats, CompetitorProduct, AnalysisStep, AnalysisResult } from '../types';

interface DashboardStore {
  // Data state - PERSISTE dans localStorage
  invoices: Invoice[];
  opportunities: Opportunity[];
  stats: DashboardStats;
  competitorProducts: CompetitorProduct[];
  analysisResults: AnalysisResult;
  
  // UI state - NE PERSISTE PAS
  isInvoiceModalOpen: boolean;
  searchTerm: string;
  sortField: 'date' | 'amount';
  sortDirection: 'asc' | 'desc';
  isLoading: boolean;
  analysisSteps: AnalysisStep[];
  lastError: string | null;
  
  // Actions
  setInvoices: (invoices: Invoice[]) => void;
  addInvoice: (invoice: Invoice) => void;
  removeInvoice: (invoiceId: string) => void;
  clearAllInvoices: () => void;
  setOpportunities: (opportunities: Opportunity[]) => void;
  setStats: (stats: DashboardStats) => void;
  setCompetitorProducts: (products: CompetitorProduct[]) => void;
  setError: (error: string | null) => void;
  
  // UI actions
  openInvoiceModal: () => void;
  closeInvoiceModal: () => void;
  setSearchTerm: (term: string) => void;
  setSorting: (field: 'date' | 'amount', direction: 'asc' | 'desc') => void;
  setLoading: (loading: boolean) => void;
  
  // Analysis actions
  updateAnalysisStep: (stepId: string, status: 'completed' | 'current' | 'pending', progress: number) => void;
  setAnalysisResults: (results: AnalysisResult) => void;
  
  // Geographic action plans
  getGeographicOpportunities: () => Array<{
    id: string;
    lat: number;
    lng: number;
    region: string;
    amount: number;
    size: 'small' | 'medium' | 'large';
    clients: number;
    actionPlan?: any;
  }>;
  
  // Computed getters
  getFilteredInvoices: () => Invoice[];
  getSortedInvoices: (invoices: Invoice[]) => Invoice[];
  
  // Stats helpers
  getTotalInvoices: () => number;
  getTotalClients: () => number;
  getTotalPotential: () => number;
  getCompetitorBrandsCount: () => number;
  
  // Persistence helpers
  getStorageInfo: () => {
    totalInvoices: number;
    totalSize: string;
    lastSaved: string;
    isLoaded: boolean;
  };
  
  // Manual save function
  forceSave: () => void;
}

// Stats VIDES au démarrage
const initialStats: DashboardStats = {
  invoicesAnalyzed: { value: 0, trend: 0, trendDirection: 'up' },
  clientsIdentified: { value: 0, trend: 0, trendDirection: 'up' },
  businessPotential: { value: 0, trend: 0, trendDirection: 'up' }
};

// Aucun produit concurrent initial
const initialCompetitorProducts: CompetitorProduct[] = [];

// Étapes d'analyse vides (UI only - pas persistées)
const initialAnalysisSteps: AnalysisStep[] = [
  { id: '1', title: 'Importation factures', icon: 'file-import', status: 'pending', progress: 0 },
  { id: '2', title: 'Reconnaissance (OCR)', icon: 'eye', status: 'pending', progress: 0 },
  { id: '3', title: 'Extraction produits', icon: 'tags', status: 'pending', progress: 0 },
  { id: '4', title: 'Analyse concurrentielle', icon: 'brain', status: 'pending', progress: 0 },
  { id: '5', title: 'Plans d\'action géographiques', icon: 'lightbulb', status: 'pending', progress: 0 }
];

// Résultats d'analyse vides
const initialAnalysisResults: AnalysisResult = {
  lastInvoice: 'Aucune analyse effectuée',
  detectedProducts: 'Aucun produit analysé',
  competitorBrands: 'Aucune marque détectée',
  opportunitiesGenerated: 'Aucune opportunité créée',
  estimatedPotential: 0
};

// Configuration de persistance avec localStorage - OPTIMISÉE
const persistConfig = {
  name: 'soprema-dashboard-v2-storage', // Version 2 avec persistance complète
  storage: createJSONStorage(() => localStorage),
  
  // PERSISTER SEULEMENT les données importantes
  partialize: (state: DashboardStore) => ({
    invoices: state.invoices,
    opportunities: state.opportunities,
    stats: state.stats,
    competitorProducts: state.competitorProducts,
    analysisResults: state.analysisResults,
    // UI state et analysis steps ne sont PAS persistés
  }),
  
  version: 2, // Version 2 pour la migration
  migrate: (persistedState: any, version: number) => {
    console.log('🔄 Migration localStorage vers version:', version);
    
    // Migration depuis version 1
    if (version === 1) {
      // Migrer les anciennes données si nécessaire
      persistedState.analysisResults = persistedState.analysisResults || initialAnalysisResults;
    }
    
    return persistedState;
  },
  
  onRehydrateStorage: () => {
    console.log('💾 Récupération des données depuis localStorage...');
    return (state, error) => {
      if (error) {
        console.error('❌ Erreur récupération localStorage:', error);
        // En cas d'erreur, utiliser les données vides
        return;
      }
      
      if (state && state.invoices && state.invoices.length > 0) {
        console.log('✅ Données récupérées depuis localStorage:', {
          factures: state.invoices.length,
          clients: new Set(state.invoices.map(inv => inv.client.name)).size,
          opportunités: state.opportunities?.length || 0,
          potentiel: state.stats?.businessPotential?.value || 0,
          tailleDonnées: JSON.stringify(state.invoices).length + ' caractères'
        });
        
        // Afficher un message à l'utilisateur
        setTimeout(() => {
          console.log('🎉 PERSISTANCE ACTIVE: Vos données sont automatiquement sauvegardées !');
        }, 1000);
      } else {
        console.log('📋 Application démarrée avec des données vides');
      }
    };
  }
};

export const useDashboardStore = create<DashboardStore>()(
  persist(
    (set, get) => ({
      // Initial state - VIDE ou récupéré du localStorage
      invoices: [],
      opportunities: [],
      stats: initialStats,
      competitorProducts: initialCompetitorProducts,
      analysisResults: initialAnalysisResults,
      
      // UI state - JAMAIS persisté (réinitialisé à chaque session)
      isInvoiceModalOpen: false,
      searchTerm: '',
      sortField: 'date',
      sortDirection: 'desc',
      isLoading: false,
      analysisSteps: initialAnalysisSteps,
      lastError: null,
      
      // Data actions avec persistance AUTOMATIQUE
      setInvoices: (invoices) => {
        set({ invoices });
        updateAllStats(invoices, set);
        console.log('💾 Factures sauvegardées automatiquement:', invoices.length);
      },
      
      addInvoice: (invoice) => {
        const updatedInvoices = [invoice, ...get().invoices];
        set({ invoices: updatedInvoices });
        updateAllStats(updatedInvoices, set);
        console.log('💾 Nouvelle facture ajoutée et sauvegardée:', invoice.number);
        console.log('📊 Total factures:', updatedInvoices.length);
      },
      
      removeInvoice: (invoiceId) => {
        const currentInvoices = get().invoices;
        const invoiceToRemove = currentInvoices.find(inv => inv.id === invoiceId);
        const updatedInvoices = currentInvoices.filter(invoice => invoice.id !== invoiceId);
        
        set({ invoices: updatedInvoices });
        updateAllStats(updatedInvoices, set);
        
        console.log(`🗑️ Facture supprimée: ${invoiceToRemove?.number || invoiceId}`);
        console.log(`💾 Données automatiquement recalculées et sauvegardées`);
        console.log(`📊 ${updatedInvoices.length} factures restantes`);
      },
      
      clearAllInvoices: () => {
        const currentCount = get().invoices.length;
        
        // Remettre TOUT à zéro avec persistance
        set({ 
          invoices: [],
          opportunities: [],
          stats: initialStats,
          competitorProducts: initialCompetitorProducts,
          analysisResults: initialAnalysisResults
        });
        
        console.log(`🗑️ TOUTES les factures supprimées (${currentCount})`);
        console.log(`💾 localStorage vidé et application réinitialisée`);
        console.log(`🔄 Application revenue à l'état initial`);
      },
      
      setOpportunities: (opportunities) => set({ opportunities }),
      setStats: (stats) => set({ stats }),
      setCompetitorProducts: (products) => set({ competitorProducts: products }),
      setError: (error) => set({ lastError: error }),
      
      // UI actions - PAS de persistance
      openInvoiceModal: () => set({ isInvoiceModalOpen: true }),
      closeInvoiceModal: () => set({ isInvoiceModalOpen: false }),
      setSearchTerm: (term) => set({ searchTerm: term }),
      setSorting: (field, direction) => set({ sortField: field, sortDirection: direction }),
      setLoading: (loading) => set({ isLoading: loading }),
      
      // Analysis actions - steps ne sont pas persistés (UI temporaire)
      updateAnalysisStep: (stepId, status, progress) => set((state) => ({
        analysisSteps: state.analysisSteps.map(step =>
          step.id === stepId ? { ...step, status, progress } : step
        )
      })),
      setAnalysisResults: (results) => set({ analysisResults: results }),
      
      // Geographic opportunities with action plans
      getGeographicOpportunities: () => {
        const invoices = get().invoices;
        const regionMap = new Map();
        
        invoices.forEach(invoice => {
          const region = invoice.region || 'France';
          const existing = regionMap.get(region) || {
            id: `region-${region}`,
            region,
            amount: 0,
            clients: new Set(),
            invoices: [],
            actionPlans: []
          };
          
          existing.amount += invoice.potential;
          existing.clients.add(invoice.client.name);
          existing.invoices.push(invoice);
          
          if (invoice.actionPlan) {
            existing.actionPlans.push(invoice.actionPlan);
          }
          
          regionMap.set(region, existing);
        });
        
        return Array.from(regionMap.values()).map(region => {
          const coordinates = getRegionCoordinates(region.region);
          const size = region.amount > 150000 ? 'large' : region.amount > 80000 ? 'medium' : 'small';
          
          return {
            id: region.id,
            lat: coordinates.lat,
            lng: coordinates.lng,
            region: region.region,
            amount: region.amount,
            size,
            clients: region.clients.size,
            actionPlan: region.actionPlans.length > 0 ? region.actionPlans[0] : null
          };
        });
      },
      
      // Computed getters
      getFilteredInvoices: () => {
        const { invoices, searchTerm } = get();
        if (!searchTerm) return invoices;
        
        const term = searchTerm.toLowerCase();
        return invoices.filter(invoice =>
          invoice.number.toLowerCase().includes(term) ||
          invoice.client.name.toLowerCase().includes(term) ||
          invoice.distributor.name.toLowerCase().includes(term) ||
          invoice.products.some(product => 
            product.designation.toLowerCase().includes(term)
          )
        );
      },
      
      getSortedInvoices: (invoices) => {
        const { sortField, sortDirection } = get();
        
        return [...invoices].sort((a, b) => {
          let valueA: any, valueB: any;
          
          if (sortField === 'date') {
            valueA = new Date(a.date);
            valueB = new Date(b.date);
          } else if (sortField === 'amount') {
            valueA = a.amount;
            valueB = b.amount;
          }
          
          const comparison = valueA < valueB ? -1 : (valueA > valueB ? 1 : 0);
          return sortDirection === 'desc' ? comparison * -1 : comparison;
        });
      },
      
      // Stats helpers en temps réel
      getTotalInvoices: () => get().invoices.length,
      getTotalClients: () => new Set(get().invoices.map(inv => inv.client.name)).size,
      getTotalPotential: () => get().invoices.reduce((sum, inv) => sum + inv.potential, 0),
      getCompetitorBrandsCount: () => {
        const brands = new Set();
        get().invoices.forEach(invoice => {
          invoice.products
            .filter(p => p.type === 'competitor')
            .forEach(p => brands.add(p.competitor?.brand || 'Marque extraite'));
        });
        return brands.size;
      },
      
      // Informations sur le stockage avec état de chargement
      getStorageInfo: () => {
        const invoices = get().invoices;
        const dataSize = JSON.stringify(invoices).length;
        const formattedSize = dataSize > 1024 * 1024 
          ? `${(dataSize / 1024 / 1024).toFixed(2)} MB`
          : dataSize > 1024 
            ? `${(dataSize / 1024).toFixed(2)} KB`
            : `${dataSize} bytes`;
        
        return {
          totalInvoices: invoices.length,
          totalSize: formattedSize,
          lastSaved: new Date().toLocaleString('fr-FR'),
          isLoaded: true // Toujours true car les données sont chargées
        };
      },
      
      // Forcer la sauvegarde manuelle (debug)
      forceSave: () => {
        const state = get();
        console.log('💾 Sauvegarde manuelle forcée:', {
          factures: state.invoices.length,
          taille: JSON.stringify(state.invoices).length + ' caractères'
        });
        // La persistance se fait automatiquement via Zustand
      }
    }),
    persistConfig
  )
);

// Fonction unifiée pour mettre à jour TOUTES les stats automatiquement avec PERSISTANCE
function updateAllStats(invoices: Invoice[], set: any) {
  const stats = calculateStatsFromInvoices(invoices);
  const opportunities = generateOpportunitiesFromInvoices(invoices);
  const competitorProducts = extractCompetitorProducts(invoices);
  const analysisResults = calculateAnalysisResults(invoices);
  
  set({ 
    stats, 
    opportunities, 
    competitorProducts, 
    analysisResults 
  });
  
  console.log(`📊 Stats automatiquement mises à jour ET persistées:`, {
    factures: invoices.length,
    clients: new Set(invoices.map(inv => inv.client.name)).size,
    potentiel: Math.round(invoices.reduce((sum, inv) => sum + inv.potential, 0)),
    opportunités: opportunities.length,
    produitsConcurrents: competitorProducts.length,
    dernièreSauvegarde: new Date().toLocaleTimeString()
  });
}

// Fonction pour calculer les résultats d'analyse - SEULEMENT sur vraies données
function calculateAnalysisResults(invoices: Invoice[]): AnalysisResult {
  if (invoices.length === 0) {
    return initialAnalysisResults;
  }
  
  const lastInvoice = invoices[0];
  const totalProducts = invoices.reduce((sum, inv) => sum + inv.products.length, 0);
  const competitorBrandsSet = new Set();
  
  invoices.forEach(invoice => {
    invoice.products
      .filter(p => p.type === 'competitor')
      .forEach(p => competitorBrandsSet.add(p.competitor?.brand || 'Marque extraite'));
  });
  
  const opportunities = generateOpportunitiesFromInvoices(invoices);
  const totalPotential = invoices.reduce((sum, inv) => sum + inv.potential, 0);
  
  return {
    lastInvoice: lastInvoice.client.name,
    detectedProducts: `${totalProducts} produits analysés`,
    competitorBrands: `${competitorBrandsSet.size} marques identifiées`,
    opportunitiesGenerated: `${opportunities.length} opportunités créées`,
    estimatedPotential: totalPotential
  };
}

// Fonction pour calculer les stats - SEULEMENT sur vraies données
function calculateStatsFromInvoices(invoices: Invoice[]): DashboardStats {
  const invoicesCount = invoices.length;
  const clientsSet = new Set(invoices.map(inv => inv.client.name));
  const clientsCount = clientsSet.size;
  const totalPotential = invoices.reduce((sum, inv) => sum + inv.potential, 0);
  
  return {
    invoicesAnalyzed: { 
      value: invoicesCount, 
      trend: Math.max(0, invoicesCount), 
      trendDirection: 'up' 
    },
    clientsIdentified: { 
      value: clientsCount, 
      trend: Math.max(0, clientsCount), 
      trendDirection: 'up' 
    },
    businessPotential: { 
      value: totalPotential, 
      trend: Math.max(0, totalPotential * 0.1), 
      trendDirection: 'up' 
    }
  };
}

// Générer des opportunités - SEULEMENT à partir des vraies factures
function generateOpportunitiesFromInvoices(invoices: Invoice[]): Opportunity[] {
  if (invoices.length === 0) return [];
  
  const clientMap = new Map();
  
  invoices.forEach(invoice => {
    const clientName = invoice.client.name;
    const existing = clientMap.get(clientName) || {
      client: clientName,
      distributor: invoice.distributor.name,
      region: invoice.region || 'France',
      volume: 0,
      potential: 0,
      competitorProducts: new Set(),
      invoiceCount: 0
    };
    
    existing.volume += invoice.amount;
    existing.potential += invoice.potential;
    existing.invoiceCount += 1;
    
    invoice.products
      .filter(p => p.type === 'competitor')
      .forEach(p => existing.competitorProducts.add(p.designation));
    
    clientMap.set(clientName, existing);
  });
  
  return Array.from(clientMap.values())
    .filter(client => client.volume > 0)
    .map((client, index) => ({
      id: `opp-${index}`,
      title: client.client,
      subtitle: `via ${client.distributor} • ${client.region}`,
      client: client.client,
      distributor: client.distributor,
      region: client.region,
      volume: client.volume,
      potential: client.potential,
      trend: Math.floor(Math.random() * 30) + 5,
      priority: client.potential > 50000 ? 'high' : client.potential > 20000 ? 'medium' : 'low',
      description: `Client avec ${client.invoiceCount} facture(s) analysée(s) représentant un potentiel commercial.`,
      detectedProducts: Array.from(client.competitorProducts).slice(0, 3),
      badge: client.invoiceCount > 2 ? 'Client récurrent' : 'Nouvelle opportunité'
    }));
}

// Extraire les produits concurrents - SEULEMENT des vraies factures
function extractCompetitorProducts(invoices: Invoice[]): CompetitorProduct[] {
  if (invoices.length === 0) return [];
  
  const productMap = new Map();
  
  invoices.forEach(invoice => {
    invoice.products
      .filter(p => p.type === 'competitor')
      .forEach(product => {
        const brand = product.competitor?.brand || 'Marque extraite';
        const existing = productMap.get(brand) || { name: brand, amount: 0 };
        existing.amount += product.totalPrice;
        productMap.set(brand, existing);
      });
  });
  
  const products = Array.from(productMap.values());
  const total = products.reduce((sum, p) => sum + p.amount, 0);
  
  return products
    .map(product => ({
      ...product,
      percentage: total > 0 ? Math.round((product.amount / total) * 100) : 0
    }))
    .sort((a, b) => b.amount - a.amount)
    .slice(0, 5);
}

// Coordonnées des régions françaises
function getRegionCoordinates(region: string): { lat: number; lng: number } {
  const coordinates: Record<string, { lat: number; lng: number }> = {
    'Île-de-France': { lat: 48.8566, lng: 2.3522 },
    'Auvergne-Rhône-Alpes': { lat: 45.7640, lng: 4.8357 },
    'Hauts-de-France': { lat: 50.4801, lng: 2.7931 },
    'Grand Est': { lat: 48.5734, lng: 7.7521 },
    'Nouvelle-Aquitaine': { lat: 44.8378, lng: -0.5792 },
    'Occitanie': { lat: 43.6047, lng: 1.4442 },
    'Pays de la Loire': { lat: 47.4784, lng: -0.5632 },
    'Bretagne': { lat: 48.2020, lng: -2.9326 },
    'Normandie': { lat: 49.1829, lng: -0.3707 },
    'Bourgogne-Franche-Comté': { lat: 47.2808, lng: 4.9994 },
    'Centre-Val de Loire': { lat: 47.7516, lng: 1.6751 },
    'Provence-Alpes-Côte d\'Azur': { lat: 43.9352, lng: 6.0679 },
    'Corse': { lat: 42.0396, lng: 9.0129 },
    'France': { lat: 46.603354, lng: 1.888334 }
  };
  
  return coordinates[region] || coordinates['France'];
}