// Exemple d'int√©gration de la base Soprema dans le prompt Claude
// √Ä int√©grer dans server.js

import { improvedSopremaProductMatcher } from './IMPROVED_PRODUCT_MATCHER.js';

// Fonction pour cr√©er un prompt enrichi avec la base Soprema
async function createEnhancedPrompt() {
  // Charger les produits les plus repr√©sentatifs
  const topProducts = await improvedSopremaProductMatcher.getTopProductsForPrompt(300);
  
  const enhancedSystemPrompt = `Tu es un expert en analyse de factures pour SOPREMA. Tu dois extraire les informations de la facture fournie et les retourner au format JSON structur√©.

INSTRUCTIONS IMPORTANTES:
1. Extrais TOUTES les informations disponibles de la facture
2. Pour chaque produit, identifie s'il appartient √† SOPREMA ou √† un CONCURRENT avec PR√âCISION
3. Si des informations sont manquantes, utilise des valeurs par d√©faut appropri√©es
4. Les montants doivent √™tre des nombres (pas de symboles mon√©taires)
5. Les dates doivent √™tre au format YYYY-MM-DD

IDENTIFICATION DES MARQUES - M√âTHODOLOGIE RENFORC√âE:

üéØ R√àGLE PRINCIPALE: Un produit est SOPREMA seulement s'il correspond aux r√©f√©rences SOPREMA connues.

MARQUES SOPREMA (isCompetitor = false) - R√âF√âRENCES PRINCIPALES:
- SOPREMA (toute variation)
- SOPRALENE (membranes bitumineuses) 
- SOPRASTAR (autoprot√©g√©es)
- SOPRADUR (PVC)
- SARNAVAP (pare-vapeur)
- PAVAFLEX (isolation)
- PAVATEX (isolation bois)
- SOPRASMART (syst√®mes intelligents)
- ELASTOPHENE (membranes SBS)
- SOPRFIX / SOPRAFIX (fixations)
- MAMMOUTH (membranes haute performance)
- ALSAN (r√©sines liquides)
- CURAL (√©tanch√©it√© liquide)
- EFISARKING (isolation toiture)
- SOPRASOLAR (photovolta√Øque)
- EFISOL (isolation)

R√âF√âRENCES SOPREMA EXACTES FR√âQUENTES:
${topProducts.slice(0, 200).map(product => `- ${product}`).join('\n')}

EXEMPLES DE PRODUITS SOPREMA SP√âCIFIQUES:
${topProducts.slice(200, 300).map(product => `- ${product}`).join('\n')}

CONCURRENTS PRINCIPAUX (isCompetitor = true):
- IKO (membranes d'√©tanch√©it√©)
- ROCKWOOL (isolation)
- ISOVER (isolation Saint-Gobain)
- URSA (isolation)
- KNAUF (isolation)
- FIRESTONE (membranes EPDM)
- CARLISLE (membranes)
- SIPLAST (√©tanch√©it√© Icopal)
- ICOPAL (membranes bitumineuses)
- BAUDER (syst√®mes d'√©tanch√©it√©)
- RHEPANOL (membranes FPO)
- RESITRIX (membranes EPDM)

M√âTHODOLOGIE D'IDENTIFICATION PR√âCISE:

1. CORRESPONDANCE EXACTE (priorit√© 1):
   - Compare chaque produit avec la liste des r√©f√©rences SOPREMA ci-dessus
   - Si correspondance exacte ou tr√®s proche ‚Üí isCompetitor = false

2. ANALYSE DES MOTS-CL√âS (priorit√© 2):
   - Recherche des marques/r√©f√©rences SOPREMA dans le nom du produit
   - Attention aux variantes (SOPRALENE vs SOPRA LENE)

3. ANALYSE CONTEXTUELLE (priorit√© 3):
   - Si le fournisseur est SOPREMA ‚Üí tous produits = SOPREMA (isCompetitor = false)
   - Si distributeur mixte ‚Üí analyser chaque r√©f√©rence individuellement

4. R√àGLES DE CLASSIFICATION FINALES:
   - EXPLICITEMENT DANS LA LISTE SOPREMA ‚Üí isCompetitor = false
   - EXPLICITEMENT CONCURRENT ‚Üí isCompetitor = true  
   - G√âN√âRIQUE SANS MARQUE + fournisseur SOPREMA ‚Üí isCompetitor = false
   - DOUTE OU G√âN√âRIQUE + autre fournisseur ‚Üí isCompetitor = true

5. AJOUT DU NIVEAU DE CONFIANCE:
   - "high": correspondance exacte ou mot-cl√© SOPREMA clair
   - "medium": correspondance partielle ou contexte probable
   - "low": classification par d√©faut ou incertaine

Format de sortie attendu:
{
  "invoiceInfo": {
    "number": "string",
    "date": "YYYY-MM-DD",
    "supplier": "string",
    "customer": "string"
  },
  "products": [
    {
      "designation": "nom exact du produit",
      "quantity": number,
      "unitPrice": number,
      "totalPrice": number,
      "isCompetitor": boolean,
      "brand": "marque identifi√©e ou null",
      "category": "type de produit",
      "confidence": "high|medium|low",
      "matchingReason": "exact_match|keyword_match|supplier_context|default_classification"
    }
  ],
  "totals": {
    "subtotal": number,
    "tax": number,
    "total": number
  }
}

IMPORTANT: Utilise le champ "matchingReason" pour expliquer pourquoi tu as classifi√© chaque produit.`;

  return enhancedSystemPrompt;
}

// Fonction modifi√©e pour l'analyse des factures avec prompt enrichi
async function analyzeInvoiceWithEnhancedPrompt(req, res) {
  try {
    console.log(`üìã Analyse d'une facture avec prompt ENRICHI...`);
    
    // ... [code existant pour traitement du fichier] ...
    
    // Cr√©er le prompt enrichi avec la base Soprema
    const systemPrompt = await createEnhancedPrompt();
    
    // Pr√©parer les messages pour Claude
    const messages = [
      {
        role: 'user',
        content: [
          {
            type: 'text',
            text: isPDF 
              ? `Analyse cette facture et extrais les informations au format JSON. Contenu: ${contentForAnalysis}`
              : 'Analyse cette facture et extrais les informations au format JSON.'
          }
        ]
      }
    ];

    if (!isPDF) {
      messages[0].content.push({
        type: 'image',
        source: {
          type: 'base64',
          media_type: req.file.mimetype,
          data: contentForAnalysis.split(',')[1]
        }
      });
    }

    // Appel √† Claude avec le prompt enrichi
    const response = await anthropic.messages.create({
      model: 'claude-3-5-sonnet-20241022',
      max_tokens: 4096,
      temperature: 0,
      system: systemPrompt,
      messages: messages
    });

    // Traitement de la r√©ponse
    const responseText = response.content[0].text;
    console.log('üìù R√©ponse Claude re√ßue avec prompt enrichi');
    
    const jsonMatch = responseText.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      throw new Error('Aucun JSON valide trouv√© dans la r√©ponse');
    }

    const extractedData = JSON.parse(jsonMatch[0]);
    console.log('‚úÖ Donn√©es extraites avec prompt enrichi');
    console.log(`üéØ Produits avec raisons de classification: ${extractedData.products?.length || 0}`);

    // Log des raisons de classification
    if (extractedData.products) {
      extractedData.products.forEach(product => {
        console.log(`üìä ${product.designation}: ${product.isCompetitor ? 'CONCURRENT' : 'SOPREMA'} (${product.confidence}, ${product.matchingReason})`);
      });
    }

    // √âTAPE DE V√âRIFICATION OPTIONNELLE avec le matcher am√©lior√©
    console.log('\nüîç V√©rification post-traitement avec matcher am√©lior√©...');
    const verificationResult = await improvedSopremaProductMatcher.verifyProducts(extractedData.products || []);
    
    // Utiliser les produits v√©rifi√©s
    extractedData.products = verificationResult.products;
    extractedData.verificationSummary = verificationResult.summary;

    // Nettoyage du fichier temporaire
    fs.unlink(req.file.path, (err) => {
      if (err) console.error('Erreur suppression fichier:', err);
    });

    // Statistiques finales
    const sopremaProducts = extractedData.products.filter(p => !p.isCompetitor);
    const competitorProducts = extractedData.products.filter(p => p.isCompetitor);
    
    console.log(`\nüìà R√âSULTATS FINAUX:`);
    console.log(`   üü¢ Produits SOPREMA: ${sopremaProducts.length}`);
    console.log(`   üî¥ Produits CONCURRENTS: ${competitorProducts.length}`);
    console.log(`   üí∞ CA Potentiel: ${competitorProducts.reduce((sum, p) => sum + (p.totalPrice || 0), 0).toFixed(2)}‚Ç¨`);

    res.json({
      success: true,
      data: extractedData,
      message: 'Facture analys√©e avec prompt enrichi et v√©rification automatique',
      enhanced: true,
      verification: verificationResult.summary
    });

  } catch (error) {
    console.error('‚ùå Erreur analyse facture enrichie:', error);
    res.status(500).json({
      error: 'Erreur analyse',
      message: error.message
    });
  }
}

// Export pour int√©gration dans server.js
export { createEnhancedPrompt, analyzeInvoiceWithEnhancedPrompt };